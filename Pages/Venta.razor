@layout Layout.MainLayout
@page "/venta"
@using EccomerceBlazorWasm.Interfaces
@using EccomerceBlazorWasm.Interfaces.PorductInterface
@using EccomerceBlazorWasm.Models
@using EccomerceBlazorWasm.Models.CreateModel
@using EccomerceBlazorWasm.Models.ViewModel
@using EccomerceBlazorWasm.Services

@inject ISaleService SaleService
@inject IProduct ProductService
@inject NavigationManager _navigation
@inject IPaymentMethodService _paymentMethodsService
@inject IOrderStatusService _orderStatusService

<PageTitle>Venta</PageTitle>

<AuthorizeView>
    <Authorized>
        <h3 class="text-3xl font-bold text-center my-6">Generar Nueva Orden de Venta</h3>

        <div class="container mx-auto p-6 bg-white shadow-lg rounded-lg">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="mb-4">
                    <label for="customerDni" class="block text-gray-700 font-semibold">DNI del Cliente</label>
                    <input type="text" id="customerDni" @bind="orderRequest.CustomerDNI" class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300" />
                </div>
                <div class="mb-4">
                    <label for="customerEmail" class="block text-gray-700 font-semibold">Email del Cliente</label>
                    <input type="email" id="customerEmail" @bind="orderRequest.CustomerEmail" class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300" />
                </div>
                <div class="mb-4">
                    <label for="workerId" class="block text-gray-700 font-semibold">ID del Trabajador</label>
                    <input type="text" id="workerId" @bind="orderRequest.WorkerId" class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300" />
                </div>
                <div class="mb-4">
                    <label for="paymentMethod" class="block text-gray-700 font-semibold">Método de Pago</label>
                    <select id="paymentMethod" @bind="orderRequest.PaymentMethodId" class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300">
                        <option value="">Selecciona un método de pago</option>
                        @foreach (var method in paymentMethods)
                        {
                            <option value="@method.Id">@method.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-4">
                    <label for="status" class="block text-gray-700 font-semibold">Estado de la Orden</label>
                    <select id="status" @bind="orderRequest.StatusId" class="w-full px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300">
                        <option value="">Selecciona el estado</option>
                        @foreach (var status in orderStatuses)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    </select>
                </div>
            </div>

            <h4 class="text-xl font-semibold text-gray-700 mt-6">Detalles del Producto</h4>
            <div class="flex flex-col md:flex-row gap-4 mb-4">
                <select id="product" @bind="selectedProductId" class="flex-1 px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300">
                    <option value="">Selecciona un producto</option>
                    @foreach (var product in products)
                    {
                        <option value="@product.Id">@product.Name</option>
                    }
                </select>
                <input type="number" id="quantity" @bind="orderDetail.Quantity" placeholder="Cantidad" class="flex-1 px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300" />
                <input type="number" id="unitPrice" @bind="orderDetail.UnitPrice" placeholder="Precio Unitario" class="flex-1 px-4 py-3 border rounded-md focus:outline-none focus:ring focus:ring-blue-300" />
                <button @onclick="AddProduct" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition">Agregar Producto</button>
            </div>

            <h4 class="text-xl font-semibold text-gray-700 mt-6">Productos Seleccionados</h4>
            <div class="selected-products bg-gray-100 p-4 rounded-md">
                @if (orderRequest.OrderItems.Any())
                {
                    <ul class="space-y-2">
                        @foreach (var item in orderRequest.OrderItems)
                        {
                            <li class="flex justify-between items-center p-2 bg-white rounded-md shadow-sm">
                                <span class="text-gray-700">Nombre del Producto: (@item.ProductId) - Cantidad: @item.Quantity - Precio Unitario: @item.UnitPrice</span>
                                <button @onclick="() => RemoveProduct(item)" class="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600 transition">Eliminar</button>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-gray-500">No hay productos seleccionados</p>
                }
            </div>

            <button @onclick="CreateOrder" class="bg-green-500 text-white px-6 py-3 mt-6 rounded-md hover:bg-green-600 transition w-full">Generar Orden</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>


@code {
    private OrderDetailRequestDTO orderDetail = new OrderDetailRequestDTO();
    private OrderRequest orderRequest = new OrderRequest
        {
            OrderItems = new List<OrderDetailRequestDTO>(),
            CreatedAt = DateTime.Now
        };
    private List<ProductViewModel> products = new List<ProductViewModel>();
    private List<PaymentMethodViewModel> paymentMethods = new List<PaymentMethodViewModel>();
    private List<OrderStatusViewModel> orderStatuses = new List<OrderStatusViewModel>();
    private int? selectedProductId;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllAsync();
        paymentMethods = await _paymentMethodsService.GetAllPaymentMethodsAsync();
        orderStatuses = await _orderStatusService.GetAllAsync();
    }

    private async Task AddProduct()
    {
        if (selectedProductId.HasValue)
        {
            // Obtén el producto por ID
            var product = await ProductService.GetByIdAsync(selectedProductId.Value);
            if (product != null)
            {
                // Asegúrate de que el precio sea válido
                decimal minPrice = product.Cost * 1.1m ?? 0; // 10% más que el costo
                if (orderDetail.UnitPrice < minPrice)
                {
                    Console.WriteLine($"El precio debe ser al menos un 10% mayor que el costo: {minPrice}");
                    return; // Sale del método si el precio es demasiado bajo
                }

                orderDetail.ProductId = product.Id; // Asigna el ID del producto
                orderRequest.OrderItems.Add(new OrderDetailRequestDTO
                    {
                        ProductId = orderDetail.ProductId,
                        Quantity = orderDetail.Quantity,
                        UnitPrice = orderDetail.UnitPrice
                    });

                // Reinicia las propiedades después de agregar
                orderDetail = new OrderDetailRequestDTO();
                selectedProductId = null; // Reiniciar la selección del producto
            }
        }
    }

    // private async Task AddProduct()
    // {
    //     if (selectedProductId.HasValue)
    //     {
    //         // Obtén el producto por ID
    //         var product = await ProductService.GetByIdAsync(selectedProductId.Value);
    //         if (product != null)
    //         {
    //             // Suponiendo que el modelo de producto tiene una propiedad Cost
    //             decimal minPrice = product.Cost * 1.1m ?? 0; // 10% más que el costo
    //             if (product.Price < minPrice)
    //             {
    //                 // Puedes mostrar un mensaje de error o manejar el caso como desees
    //                 Console.WriteLine($"El precio debe ser al menos un 10% mayor que el costo: {minPrice}");
    //                 return; // Sale del método si el precio es demasiado bajo
    //             }

    //             var orderItem = new OrderDetailRequestDTO
    //                 {
    //                     ProductId = product.Id,
    //                     Quantity = 1, // Puedes ajustar la cantidad según tu necesidad
    //                     UnitPrice = product.Price ?? 0// Asignar el precio del producto
    //                 };

    //             orderRequest.OrderItems.Add(orderItem);
    //             selectedProductId = null; // Reiniciar la selección del producto
    //         }
    //     }
    // }

    private void RemoveProduct(OrderDetailRequestDTO item)
    {
        orderRequest.OrderItems.Remove(item);
    }

    private async Task CreateOrder()
    {
        if (orderRequest.OrderItems.Count == 0)
        {
            Console.WriteLine("No se puede crear una orden sin productos.");
            return;
        }

        try
        {
            await SaleService.CreateOrderAsync(orderRequest);
            _navigation.NavigateTo("/ordenes");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear la orden: {ex.Message}");
        }
    }
}
